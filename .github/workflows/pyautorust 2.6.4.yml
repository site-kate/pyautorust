name: w1nd35k v2.6.4

on:
  workflow_dispatch:

jobs:
  w1nd35k:
    runs-on: windows-latest
    timeout-minutes: 240  # Keep runner alive for 4 hours

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download RustDesk
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/rustdesk/rustdesk/releases/download/1.4.2/rustdesk-1.4.2-x86_64.exe" -OutFile "$env:GITHUB_WORKSPACE\rustdesk.exe"

      - name: Download Apps to Desktop
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/NobilityDeviant/ZenDownloader/releases/download/1.2.2/ZenDownloader-1.2.2.exe" -OutFile "$env:USERPROFILE\Desktop\ZenDownloader-1.1.14.exe"
          Invoke-WebRequest -Uri "https://github.com/manga-download/hakuneko/releases/download/v6.1.7/hakuneko-desktop_6.1.7_windows-setup_amd64.exe" -OutFile "$env:USERPROFILE\Desktop\hakuneko-desktop_6.1.7_windows-setup_amd64.exe"
          Invoke-WebRequest -Uri "https://github.com/aclap-dev/vdhcoapp/releases/download/v2.0.19/vdhcoapp-windows-x86_64-installer.exe" -OutFile "$env:USERPROFILE\Desktop\vdhcoapp.exe"
          Invoke-WebRequest -Uri "https://github.com/duncanthrax/scream/releases/download/4.0/Scream4.0.zip" -OutFile "$env:USERPROFILE\Desktop\scream4.zip"
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/b3h1m0th/studious-engine/45174689b7e604f00651291a05fa12e4ed0d5eab/Hide.me-Setup-4.3.1.exe" -OutFile "$env:USERPROFILE\Desktop\Hide.me-Setup.exe"
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pyautogui, pillow, and opencv-python
        run: |
          python -m pip install --upgrade pip
          pip install pyautogui pillow opencv-python

      - name: Start RustDesk
        shell: pwsh
        run: |
          Start-Process -FilePath "$env:GITHUB_WORKSPACE\rustdesk.exe"
          Start-Sleep -Seconds 10  # Give RustDesk a moment to start

      - name: Select 3-dot menu with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(3)  # Ensure RustDesk window is fully loaded

          try:
              location = pyautogui.locateCenterOnScreen('3dot.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked 3-dot menu at:", location)
              else:
                  print("3-dot menu not found on screen.")
          except Exception as e:
              print("Error locating 3-dot menu:", e)

      - name: Select Security in Menu with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for menu to open

          try:
              location = pyautogui.locateCenterOnScreen('sec.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked Security menu at:", location)
              else:
                  print("Security menu not found on screen.")
          except Exception as e:
              print("Error locating Security menu:", e)

      - name: Select Enable Remote Config Mod with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for security menu to open

          try:
              location = pyautogui.locateCenterOnScreen('ena.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked Enable Remote Config Mod at:", location)
              else:
                  print("Enable Remote Config Mod button not found on screen.")
          except Exception as e:
              print("Error locating Enable Remote Config Mod button:", e)

      - name: Select home with pyautogui
        shell: python
        run: |
          import pyautogui
          import time

          time.sleep(2)  # Wait for enable remote config to process

          try:
              location = pyautogui.locateCenterOnScreen('home.png', confidence=0.8)
              if location:
                  pyautogui.moveTo(location)
                  pyautogui.click()
                  print("Clicked home at:", location)
              else:
                  print("home button not found on screen.")
          except Exception as e:
              print("Error locating home button:", e)

      - name: Take Screenshot via PowerShell
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          $bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
          $bitmap.Save("$env:GITHUB_WORKSPACE\screenshot.png", [System.Drawing.Imaging.ImageFormat]::Png)
          $graphics.Dispose()
          $bitmap.Dispose()

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-screenshot
          path: screenshot.png

      - name: Keep runner alive for 4 hours
        run: |
          echo "Sleeping for 4 hours to keep session active..."
          Start-Sleep -Seconds 14400
